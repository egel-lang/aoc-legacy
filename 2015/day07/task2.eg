# Advent of Code (AoC) - day 7, task 1

import "prelude.eg"

using System, OS, List, String (to_chars, from_chars)

def parse =
    do Regex::matches (Regex::compile "[^ ]+") 
    |> map [X -> if Regex::look_at (Regex::compile "[0-9]+") X then to_int X else X]

def op =
    [C {X, _, Y} -> Dict::set C Y X
    |C {"NOT", X, _, Y} -> Dict::set C Y ((!~),X)
    |C {X, "OR", Y, _, Z} -> Dict::set C Z (X, ($), Y)
    |C {X, "AND", Y, _, Z} -> Dict::set C Z (X, (&), Y)
    |C {X, "LSHIFT", Y, _, Z} -> Dict::set C Z (X, (<<), Y)
    |C {X, "RSHIFT", Y, _, Z} -> Dict::set C Z (X, (>>), Y)]

def circuit = foldl [C OP -> op C OP] Dict::dict

def store =
    [C A B -> let R = B & 65535 in Dict::set C A R; R]

def evaluate =
    [C N:int -> N
    |C A:text -> Dict::keys C; [(X,O,Y) -> store C A (O (evaluate C X) (evaluate C Y))
            |(O,X) -> store C A (O (evaluate C X))
            |X:int -> X |X -> store C A (evaluate C X)] (Dict::get C A)]

def main =
    read_lines stdin |> map parse |> circuit |>
    [D -> evaluate (Dict::copy D) "a" |> Dict::set D "b" |> flip evaluate "a"] 
