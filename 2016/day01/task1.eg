# Advent of Code (AoC) - day 1, task 1

import "prelude.eg"

using System, OS, List, String (from_chars, to_chars)

def parse = 
    do Regex::matches (Regex::compile "[LR][0-9]+")
    |> map (do to_chars |> split_at 1 |> proj_update 1 (do from_chars |> to_int))
    |> map (proj_update 0 head)

def dir = [N -> nth (((N%4)+4)%4) {(0,1),(1,0),(0,-1),(-1,0)}]

def walk =
    foldl_state
        [D P ('L',N) -> (D - 1, add (mul N (dir (D - 1))) P)
        |D P ('R',N) -> (D + 1, add (mul N (dir (D + 1))) P)]
        0
        (0,0)

def main =
    read_line stdin |> parse |> walk |> uncurry (+)
