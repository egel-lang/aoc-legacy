# Advent of Code (AoC) - day 2, task 2

import "prelude.eg"

using System, OS, List, String (from_chars, to_chars)

def dir = ['D' -> (0,1) |'U' -> (0,-1) |'R' -> (1,0) |'L' -> (-1,0)]

def add0 = [P Q -> [(X,Y) -> if (abs0 X + abs0 Y) > 2 then P else (X,Y)] (add P Q)]

def walk = do foldl [{P|PP} QQ -> {foldl add0 P QQ, P|PP}] {(-2,0)} |> init |> reverse

def num = 
    [(-2, 0) -> '5' |(-1,-1) -> '2' |(-1, 0) -> '6' |(-1, 1) -> 'A' |( 0,-2) -> '1'
    |( 0,-1) -> '3' |( 0, 0) -> '7' |( 0, 1) -> 'B' |( 0, 2) -> 'D' |( 1,-1) -> '4'
    |( 1, 0) -> '8' |( 1, 1) -> 'C' |( 2, 0) -> '9']

def main =
    read_lines stdin |> map (do to_chars |> map dir) |> walk |> map num |> from_chars
